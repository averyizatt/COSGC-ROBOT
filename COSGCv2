#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Adafruit_MotorShield.h>
#include <Servo.h>
#include <HCSR04.h>
#include <Wire.h>
#include <Adafruit_TCS34725.h>

// ***************************************
// Configuration & Pin Assignments
// ***************************************

// --- Servo Motors ---
// Steering servo (for steering) and an auxiliary servo for future use.
const int STEERING_SERVO_PIN = 9;   // Steering servo (attached to Motor Shield servo port)
const int AUX_SERVO_PIN = D5;       // Auxiliary servo (choose a free pin)

// Servo angle mapping for steeringServo:
  // Center/Forward: 90°
  // Right side: Mild = 60°, Aggressive = 0°
  // Left side: Mild = 120°, Aggressive = 180°

  
// --- Ultrasonic Sensor ---
// Now using analog pins:
const int ULTRASONIC_TRIG_PIN = A0;  // Trigger pin
const int ULTRASONIC_ECHO_PIN = A1;  // Echo pin (ensure proper level shifting)
const int ULTRASONIC_THRESHOLD = 20;           // Overall obstacle threshold in cm
const int ULTRASONIC_AGGRESSIVE_THRESHOLD = 10;  // If below 10 cm, use aggressive steering

// --- IR Sensor ---
// Now moved to analog pin A2.
const int IR_SENSOR_PIN = A2;
const int IR_THRESHOLD  = 500;  // Adjust based on your sensor's readings

// --- RGB Sensor ---
// Using the Adafruit TCS34725. Thresholds for various colors:
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);
const uint16_t GREEN_FLAG_THRESHOLD = 1000;  // Finish condition for green flag
const uint16_t RED_THRESHOLD        = 800;   // Minimum value for red to be considered dominant
const uint16_t BLUE_THRESHOLD       = 800;   // Minimum value for blue to be considered dominant
const uint16_t WHITE_THRESHOLD      = 1500;  // All channels high indicates white wall

// --- Control Mode Switch ---
// A physical switch selects between autonomous mode (LOW) and WiFi control (HIGH)
const int CONTROL_SWITCH_PIN = D12;  // Using internal pull-up

// --- WiFi Settings ---
const char* AP_SSID = "RobotAP";
const char* AP_PASSWORD = "password";  // Change this for security

// ***************************************
// Global Objects
// ***************************************

// Create the web server on port 80.
ESP8266WebServer server(80);

// Create an instance of the Adafruit Motor Shield.
Adafruit_MotorShield AFMS = Adafruit_MotorShield(); // Default I2C address

// Get pointers to the four DC motors (channels 1–4).
Adafruit_DCMotor *motor1 = AFMS.getMotor(1);
Adafruit_DCMotor *motor2 = AFMS.getMotor(2);
Adafruit_DCMotor *motor3 = AFMS.getMotor(3);
Adafruit_DCMotor *motor4 = AFMS.getMotor(4);

// Create Servo objects.
Servo steeringServo;  // For steering
Servo auxServo;       // Auxiliary servo

// Create an instance of the ultrasonic sensor.
HCSR04 ultrasonicSensor(ULTRASONIC_TRIG_PIN, ULTRASONIC_ECHO_PIN);

// Global variables for obstacle detection and recovery.
unsigned long obstacleStartTime = 0;
const unsigned long stuckThreshold = 5000; // 5 seconds
bool finished = false;  // Flag when the course is complete (green flag detected)

// ***************************************
// Function Prototypes
// ***************************************
void driveForward();
void driveBackward();
void stopDCMotors();

void centerSteering();         // Set steering servo to 90°
void steerRightAggressive();   // Set steering servo to 0° (aggressive right)
void steerRightMild();         // Set steering servo to 60° (mild right)
void steerLeftMild();          // Set steering servo to 120° (mild left)
void steerLeftAggressive();    // Set steering servo to 180° (aggressive left)

void autonomousSteering();     // Chooses servo angle based on ultrasonic sensor
float getUltrasonicDistance(); // Returns distance in cm

void recoverFromStuck();       // Recovery routine if the robot is stuck

// WiFi remote control endpoint handlers.
void handleForward();
void handleBackward();
void handleStop();
void handleRight();
void handleRightMild();
void handleLeft();
void handleLeftMild();
void handleCenter();
void handleCamera();

// ***************************************
// Setup Function
// ***************************************
void setup() {
  Serial.begin(115200);
  Serial.println("Self-Driving Robot Initializing...");

  // --- Initialize the Adafruit Motor Shield ---
  if (!AFMS.begin()) { // Default frequency is 1.6KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }
  // Set initial speed for DC motors (0–255)
  motor1->setSpeed(150);
  motor2->setSpeed(150);
  motor3->setSpeed(150);
  motor4->setSpeed(150);

  // --- Initialize Servos ---
  steeringServo.attach(STEERING_SERVO_PIN);
  auxServo.attach(AUX_SERVO_PIN);
  centerSteering();  // Start with steering centered (90°)

  // --- Initialize Sensors ---
  pinMode(IR_SENSOR_PIN, INPUT);
  // The HCSR04 library handles ultrasonic sensor triggering internally.
  // Initialize control switch (with internal pull-up)
  pinMode(CONTROL_SWITCH_PIN, INPUT_PULLUP);

  // --- Initialize RGB Sensor ---
  if (tcs.begin()) {
    Serial.println("RGB sensor initialized.");
  } else {
    Serial.println("RGB sensor not found. Check wiring.");
  }

  // --- Setup WiFi Access Point ---
  WiFi.softAP(AP_SSID, AP_PASSWORD);
  Serial.print("Access Point \"");
  Serial.print(AP_SSID);
  Serial.println("\" started");
  Serial.print("IP address: ");
  Serial.println(WiFi.softAPIP());

  // --- Define Web Server Routes ---
  server.on("/forward", handleForward);
  server.on("/backward", handleBackward);
  server.on("/stop", handleStop);
  // Right side endpoints
  server.on("/right", handleRight);         // Aggressive right (0°)
  server.on("/rightmild", handleRightMild);   // Mild right (60°)
  // Left side endpoints
  server.on("/left", handleLeft);           // Aggressive left (180°)
  server.on("/leftmild", handleLeftMild);     // Mild left (120°)
  server.on("/center", handleCenter);
  server.on("/camera", handleCamera);
  server.begin();
  Serial.println("HTTP server started");
}

// ***************************************
// Main Loop
// ***************************************
void loop() {
  // First, read the RGB sensor values.
  uint16_t r, g, b, c;
  tcs.getRawData(&r, &g, &b, &c);
  Serial.print("RGB: R=");
  Serial.print(r);
  Serial.print(" G=");
  Serial.print(g);
  Serial.print(" B=");
  Serial.print(b);
  Serial.print(" C=");
  Serial.println(c);
  
  // Check for finish condition: green flag.
  if (!finished && (g > GREEN_FLAG_THRESHOLD) && (g > r) && (g > b)) {
    finished = true;
    Serial.println("Green flag detected! Course complete.");
    stopDCMotors();
    centerSteering();
    delay(1000);
    return;  // Stop further processing.
  }
  
  // Autonomous mode vs. WiFi remote control:
  bool wifiControl = (digitalRead(CONTROL_SWITCH_PIN) == HIGH);
  if (wifiControl) {
    // WiFi Remote Control Mode:
    server.handleClient();
    stopDCMotors();
    obstacleStartTime = 0; // Reset obstacle timer.
  } else {
    // Autonomous Mode:
    // Read IR and ultrasonic sensors.
    int irValue = analogRead(IR_SENSOR_PIN);
    float ultrasonicDistance = getUltrasonicDistance();
    Serial.print("IR Sensor Value: ");
    Serial.println(irValue);
    Serial.print("Ultrasonic Distance (cm): ");
    Serial.println(ultrasonicDistance);

    // Check for obstacles.
    if ((irValue < IR_THRESHOLD) || (ultrasonicDistance > 0 && ultrasonicDistance < ULTRASONIC_THRESHOLD)) {
      Serial.println("Obstacle detected!");
      stopDCMotors();
      
      // Start (or continue) timing the obstacle.
      if (obstacleStartTime == 0) {
        obstacleStartTime = millis();
      }
      
      // If the obstacle persists beyond the stuck threshold, trigger recovery.
      if (millis() - obstacleStartTime > stuckThreshold) {
        recoverFromStuck();
      } else {
        // Use autonomous steering based on ultrasonic distance.
        autonomousSteering();
        driveForward();
      }
    } else {
      // No obstacle detected.
      obstacleStartTime = 0;  // Reset timer.
      // Use RGB sensor guidance if available:
      // If red is dominant, steer mild left; if blue is dominant, steer mild right;
      // if white (all channels high) is detected, center the steering.
      if (r > RED_THRESHOLD && r > g && r > b) {
        Serial.println("Red dominant detected – steering mild left (120°).");
        steerLeftMild();
      } else if (b > BLUE_THRESHOLD && b > r && b > g) {
        Serial.println("Blue dominant detected – steering mild right (60°).");
        steerRightMild();
      } else if ((r > WHITE_THRESHOLD) && (g > WHITE_THRESHOLD) && (b > WHITE_THRESHOLD)) {
        Serial.println("White wall detected – centering steering (90°).");
        centerSteering();
      } else {
        centerSteering();
      }
      driveForward();
    }
  }
  
  delay(50); // Short delay for loop stability.
}

// ***************************************
// Sensor Helper Functions
// ***************************************

float getUltrasonicDistance() {
  // Use the HCSR04 library to return distance in centimeters.
  return ultrasonicSensor.dist();
}

// ***************************************
// DC Motor Control Functions (using Adafruit Motor Shield)
// ***************************************

void driveForward() {
  motor1->run(FORWARD);
  motor2->run(FORWARD);
  motor3->run(FORWARD);
  motor4->run(FORWARD);
}

void driveBackward() {
  motor1->run(BACKWARD);
  motor2->run(BACKWARD);
  motor3->run(BACKWARD);
  motor4->run(BACKWARD);
}

void stopDCMotors() {
  motor1->run(RELEASE);
  motor2->run(RELEASE);
  motor3->run(RELEASE);
  motor4->run(RELEASE);
}

// ***************************************
// Servo Steering Functions
// ***************************************

void centerSteering() {
  steeringServo.write(90);
}

void steerRightAggressive() {
  steeringServo.write(0);
}

void steerRightMild() {
  steeringServo.write(60);
}

void steerLeftMild() {
  steeringServo.write(120);
}

void steerLeftAggressive() {
  steeringServo.write(180);
}

// autonomousSteering():
// Uses ultrasonic sensor distance to choose a right turn:
//   - If very close (< ULTRASONIC_AGGRESSIVE_THRESHOLD): aggressive right (0°)
//   - Else if moderately close (< ULTRASONIC_THRESHOLD): mild right (60°)
//   - Otherwise: center steering (90°)
void autonomousSteering() {
  float distance = getUltrasonicDistance();
  if (distance > 0) {
    if (distance < ULTRASONIC_AGGRESSIVE_THRESHOLD) {
      Serial.println("Very close obstacle – aggressive right turn (0°)");
      steerRightAggressive();
    } else if (distance < ULTRASONIC_THRESHOLD) {
      Serial.println("Moderate obstacle – mild right turn (60°)");
      steerRightMild();
    } else {
      centerSteering();
    }
  } else {
    centerSteering();
  }
}

// recoverFromStuck():
// Increases reverse speed to try to free the robot, then steers slightly before resuming.
void recoverFromStuck() {
  Serial.println("Recovering from being stuck...");
  stopDCMotors();
  
  // Increase reverse speed: set motors to maximum speed temporarily.
  motor1->setSpeed(255);
  motor2->setSpeed(255);
  motor3->setSpeed(255);
  motor4->setSpeed(255);
  
  driveBackward();
  delay(1000);  // Reverse for 1 second
  stopDCMotors();
  
  // Restore normal speed.
  motor1->setSpeed(150);
  motor2->setSpeed(150);
  motor3->setSpeed(150);
  motor4->setSpeed(150);
  
  // After reversing, steer mild right.
  steerRightMild();
  driveForward();
  delay(1000);  // Move forward while turning for 1 second
  centerSteering();
  obstacleStartTime = 0;  // Reset obstacle timer
}

// ***************************************
// WiFi Remote Control Handlers
// ***************************************

void handleForward() {
  Serial.println("Remote Command: FORWARD");
  driveForward();
  server.send(200, "text/plain", "Driving Forward");
}

void handleBackward() {
  Serial.println("Remote Command: BACKWARD");
  driveBackward();
  server.send(200, "text/plain", "Driving Backward");
}

void handleStop() {
  Serial.println("Remote Command: STOP");
  stopDCMotors();
  server.send(200, "text/plain", "Motors Stopped");
}

void handleRight() {
  Serial.println("Remote Command: RIGHT (Aggressive)");
  steerRightAggressive();
  server.send(200, "text/plain", "Steering Aggressively Right (0°)");
}

void handleRightMild() {
  Serial.println("Remote Command: RIGHT MILD");
  steerRightMild();
  server.send(200, "text/plain", "Steering Mildly Right (60°)");
}

void handleLeft() {
  Serial.println("Remote Command: LEFT (Aggressive)");
  steerLeftAggressive();
  server.send(200, "text/plain", "Steering Aggressively Left (180°)");
}

void handleLeftMild() {
  Serial.println("Remote Command: LEFT MILD");
  steerLeftMild();
  server.send(200, "text/plain", "Steering Mildly Left (120°)");
}

void handleCenter() {
  Serial.println("Remote Command: CENTER");
  centerSteering();
  server.send(200, "text/plain", "Steering Centered (90°)");
}

void handleCamera() {
  Serial.println("Remote Command: CAMERA");
  // Replace with the actual IP of your ESP32-CAM.
  String html = "<html><head><meta http-equiv='refresh' content='0; url=http://192.168.4.2/stream'></head><body></body></html>";
  server.send(200, "text/html", html);
}
